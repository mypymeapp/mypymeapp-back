generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ================================
///    Core / Usuarios / Autenticación
/// ================================
model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  passwordHash      String
  avatarUrl         String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  emailVerification EmailVerification[]
  oauth             OAuthAccount[]
  passwordReset     PasswordReset[]
  sessions          Session[]
  companies         UserCompany[]
}

model Session {
  id               String   @id @default(cuid())
  userId           String
  refreshTokenHash String
  userAgent        String?
  ip               String?
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  user             User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthAccount {
  id             String        @id @default(cuid())
  userId         String
  provider       OAuthProvider
  providerUserId String
  accessToken    String?
  refreshToken   String?
  user           User          @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
}

/// ================================
///    Company / Configuración
/// ================================
model Company {
  id              String            @id @default(uuid())
  name            String            @unique
  logoFileId      String?
  createdAt       DateTime          @default(now())
  mail            String            @unique
  pais            String
  passwordHash    String
  razonSocial     String
  rubroPrincipal  String
  rut_Cuit        String            @unique
  categories      Category[]
  settings        CompanySettings?
  CompanySupplier CompanySupplier[]
  products        Product[]
  StockMovements  StockMovements[]
  members         UserCompany[]
}

model CompanySettings {
  companyId     String  @id
  invoicePrefix String  @default("S-")
  bajoStock     Int     @default(5)
  tema          String?
  company       Company @relation(fields: [companyId], references: [id])
}

model UserCompany {
  id        String  @id @default(uuid())
  userId    String
  companyId String
  role      Role
  company   Company @relation(fields: [companyId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

/// ================================
///    Productos / Inventario
/// ================================
model Category {
  id        String    @id @default(uuid())
  companyId String
  name      String
  company   Company   @relation(fields: [companyId], references: [id])
  products  Product[]

  @@unique([companyId, name])
}

model Product {
  id             String           @id @default(uuid())
  companyId      String
  name           String
  sku            String
  barcode        String?
  description    String?
  price          Float
  cost           Float?
  categoryId     String?
  imageFileId    String?          @unique
  category       Category?        @relation(fields: [categoryId], references: [id])
  company        Company          @relation(fields: [companyId], references: [id])
  imageFile      File?            @relation("ProductImage", fields: [imageFileId], references: [id])
  StockMovements StockMovements[]

  @@unique([companyId, sku])
}

model File {
  id        String   @id @default(uuid())
  name      String
  mimeType  String
  url       String
  createdAt DateTime @default(now())
  product   Product? @relation("ProductImage")
}

model CompanySupplier {
  id         String   @id
  companyId  String
  supplierId String
  Company    Company  @relation(fields: [companyId], references: [id])
  Supplier   Supplier @relation(fields: [supplierId], references: [id])

  @@unique([companyId, supplierId])
}

model StockMovements {
  id        String            @id
  companyId String
  productId String
  type      StockMovementType
  qty       Int
  reason    String?
  refType   String?
  refId     String?
  createdAt DateTime          @default(now())
  Company   Company           @relation(fields: [companyId], references: [id])
  Product   Product           @relation(fields: [productId], references: [id])
}

model Supplier {
  id              String            @id
  name            String
  cif             String            @unique
  phone           String?
  email           String?
  contactName     String?
  address         String?
  lat             Float?
  lng             Float?
  currency        String
  CompanySupplier CompanySupplier[]
}

/// ================================
///    Roles y enums
/// ================================
enum Role {
  PROPIETARIO
  EMPLEADO
  ADMIN
}

enum Currency {
  USD
  UYU
  ARS
  BRL
  EUR
}

enum OAuthProvider {
  GOOGLE
}

enum FacturaStatus {
  PAGADA
  POR_PAGAR
  VENCIDA
}

enum StockMovementType {
  ENTRADA
  SALIDA
  AJUSTE
}
